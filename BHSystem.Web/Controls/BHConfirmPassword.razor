@implements IDisposable
@inject Services.BHDialogService _dialogService;
@inject Services.ICliUserService _userService;
@inject NavigationManager _nav;
@inject AuthenticationStateProvider _authenticationStateProvider;

@if (isShowPopup)
{
    <div class="bh-modal bh-modal-blur fade show">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header bh-modal-header">
                    Xác thực người dùng @($" {FullName}")
                </div>
                <div class="modal-body bh-modal-body">
                    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
                    {
                        <ul class="validation-errors">
                            <li class="validation-message">
                                @ErrorMessage
                            </li>
                        </ul>
                    }
                    <div style="text-align: center;">
                        <TelerikLoader Visible="@isLoading" Type="@LoaderType.Pulsing" Size="@(ThemeConstants.Loader.Size.Medium)"></TelerikLoader>
                    </div>
                    <div class="mt-2">
                        <BHLabel Value="Mật khẩu:" IsRequired="true" />
                        <TelerikTextBox Id="txtPassword-token"
                                    PlaceHolder="Mật khẩu*:" @bind-Value="@password" Password="true" />
                    </div>
                </div>
                <div class="modal-footer bh-modal-footer">
                    <div class="d-flex justify-content-end">
                        <div>
                            <TelerikButton OnClick="@LogOutAsync">Đăng xuất</TelerikButton>
                            <TelerikButton ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)" OnClick="@OnSendHandler">Xác nhận</TelerikButton>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code{
    [Parameter] public string FullName { get; set; } = "";
    [Parameter] public string UserName { get; set; } = "";


    private bool isShowPopup { get; set; } = false;
    private bool isLoading { get; set; } = false;
    private string password { get; set; } = "";
    
    
    private string ErrorMessage = "";

    protected override void OnInitialized()
    {
        try
        {
            _dialogService.OnShow += showDialog;
        }
        catch (Exception) { }

    }

    private void showDialog(bool isShow)
    {
        isShowPopup = isShow;
        StateHasChanged();
    }

    ///  <summary>
    /// đăng nhập lại
    /// </summary>
    private async void OnSendHandler()
    {
        try
        {
            ErrorMessage = "";
            if(string.IsNullOrWhiteSpace(password))
            {
                ErrorMessage = "Vui lòng nhập mật khẩu.";
                return;
            }
            isLoading = true;
            await Task.Yield();
            LoginViewModel request = new LoginViewModel();
            request.UserName = this.UserName;
            request.Password = password;
            var response = await _userService!.LoginAsync(request);
            if (!string.IsNullOrWhiteSpace(response)) { ErrorMessage = response; return; }
            isShowPopup = false;
        }
        catch (Exception ex) { ErrorMessage = ex.Message; }
        finally
        {
            await Task.Delay(200);
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    /// Đăng xuất
    /// </summary>
    private void LogOutAsync()
    {
        isShowPopup = false;
        _nav.NavigateTo($"admin/logout");
    }

    public void Dispose() => _dialogService.OnShow -= showDialog;
}

